#include <M5Stack.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <SD.h>
#include <SPI.h>
#include <ArduinoJson.h>
#include <esp_task_wdt.h>
#include <EEPROM.h>
#include <Update.h>
#include <avr/pgmspace.h>
#include <Ticker.h>
#include <TaskScheduler.h>
#include <vector>
#include <map>

// Constants and Variables
const char* firmwareDir = "/firmware/";
uint16_t themePrimaryColor = 0xB6DFE9; // Light Baby Blue
uint16_t themeSecondaryColor = 0x0083C6; // Darker Blue
std::vector<FirmwareInfo> availableFirmware;
std::vector<FirmwareInfo> installedFirmware;

#define SMALL_BLOCK_SIZE 64
#define POOL_SIZE 1024
#define LARGE_ALLOCATION_THRESHOLD 128

char memoryPool[POOL_SIZE];
bool memoryPoolAllocated[POOL_SIZE / SMALL_BLOCK_SIZE];
std::vector<void**> pointerReferences;
std::map<void*, bool> memoryMap;  // Tracks if memory is in use or not

char wifiSSID[32];
char wifiPassword[32] = "";

struct FirmwareInfo {
    String name;
    String version;
    String url;
    size_t size;
    String description;
    String previousVersion;
};

// Task Scheduler for asynchronous operations
Scheduler taskScheduler;
Task WiFiTask(0, TASK_FOREVER, &handleWiFiConnection, &taskScheduler, true);
Task HealthCheckTask(1000, TASK_FOREVER, &checkSystemHealth, &taskScheduler, true);
Task IdleMonitorTask(10000, TASK_FOREVER, &monitorIdleState, &taskScheduler, true);
Task HeartbeatTask(1000, TASK_FOREVER, &heartbeatCheck, &taskScheduler, true);
Task GarbageCollectorTask(5000, TASK_FOREVER, &runGarbageCollector, &taskScheduler, true);

// Function Prototypes
void initializeSystem();
void displayStartupIntro();
void displayCustomMessage();
void displayAvailableFirmware();
void listInstalledFirmware();
void displayInstalledFirmwareMenu();
void executeFirmware(const String &firmwareName);
void mainMenu();
void checkSystemHealth();
void heartbeatCheck();
void displayBatteryStatus();
void fadeIn();
void fadeOut();
void downloadFirmwareList();
void themeSwitchMenu();
void switchTheme(uint8_t theme);
void displayFileExplorer(const char* path);
void inputPassword();
void selectWiFiNetwork();
void connectWiFi();
void debounceButtons();
void monitorIdleState();
void enterLowPowerMode();
void runGarbageCollector();
void logOperation(const char* operation);

// Memory Management Functions
template <typename T>
class SmartPointer {
private:
    T* ptr;
    size_t* refCount;

public:
    explicit SmartPointer(T* p = nullptr) : ptr(p), refCount(new size_t(1)) {
        memoryMap[ptr] = true; // Mark this memory as in-use
    }
    SmartPointer(const SmartPointer& sp) : ptr(sp.ptr), refCount(sp.refCount) {
        (*refCount)++;
    }
    ~SmartPointer() {
        release();
    }
    SmartPointer& operator=(const SmartPointer& sp) {
        if (this != &sp) {
            release();
            ptr = sp.ptr;
            refCount = sp.refCount;
            (*refCount)++;
        }
        return *this;
    }
    T& operator*() const {
        return *ptr;
    }
    T* operator->() const {
        return ptr;
    }
    T& operator[](size_t index) const {
        return ptr[index];
    }
    T* get() const {
        return ptr;
    }
    void release() {
        if (--(*refCount) == 0) {
            memoryMap[ptr] = false; // Mark memory as no longer in use
            delete[] ptr;
            delete refCount;
        }
    }
    void updatePointer(T* newPtr) {
        ptr = newPtr;
    }
};

void memoryPoolInit() {
    memset(memoryPoolAllocated, 0, sizeof(memoryPoolAllocated));
    pointerReferences.clear();
    memoryMap.clear();
}

void registerPointerReference(void** ptrRef) {
    pointerReferences.push_back(ptrRef);
}

void* hybridMemoryAllocate(size_t size) {
    if (size <= SMALL_BLOCK_SIZE) {
        for (int i = 0; i < POOL_SIZE / SMALL_BLOCK_SIZE; i++) {
            if (!memoryPoolAllocated[i]) {
                memoryPoolAllocated[i] = true;
                return &memoryPool[i * SMALL_BLOCK_SIZE];
            }
        }
        memoryCompaction();
        return hybridMemoryAllocate(size);
    } else if (size > LARGE_ALLOCATION_THRESHOLD) {
        return heap_caps_malloc(size, MALLOC_CAP_8BIT);
    } else {
        return malloc(size);
    }
}

void hybridMemoryFree(void* ptr) {
    if (ptr >= memoryPool && ptr < memoryPool + POOL_SIZE) {
        int index = ((char*)ptr - memoryPool) / SMALL_BLOCK_SIZE;
        memoryPoolAllocated[index] = false;
        mergeAdjacentFreeBlocks();
    } else {
        free(ptr);
    }
}

void mergeAdjacentFreeBlocks() {
    for (int i = 0; i < POOL_SIZE / SMALL_BLOCK_SIZE - 1; i++) {
        if (!memoryPoolAllocated[i] && !memoryPoolAllocated[i + 1]) {
            memoryPoolAllocated[i] = false;
            memoryPoolAllocated[i + 1] = false;
        }
    }
}

void memoryCompaction() {
    int writeIndex = 0;
    for (int readIndex = 0; readIndex < POOL_SIZE / SMALL_BLOCK_SIZE; readIndex++) {
        if (memoryPoolAllocated[readIndex]) {
            if (readIndex != writeIndex) {
                memcpy(&memoryPool[writeIndex * SMALL_BLOCK_SIZE],
                       &memoryPool[readIndex * SMALL_BLOCK_SIZE],
                       SMALL_BLOCK_SIZE);
                memoryPoolAllocated[writeIndex] = true;
                memoryPoolAllocated[readIndex] = false;
                for (void** ptrRef : pointerReferences) {
                    if (*ptrRef == &memoryPool[readIndex * SMALL_BLOCK_SIZE]) {
                        *ptrRef = &memoryPool[writeIndex * SMALL_BLOCK_SIZE];
                    }
                }
            }
            writeIndex++;
        }
    }
}

// Run the garbage collector to free unused memory
void runGarbageCollector() {
    for (auto it = memoryMap.begin(); it != memoryMap.end(); ) {
        if (!it->second) {
            hybridMemoryFree(it->first);
            it = memoryMap.erase(it);
        } else {
            ++it;
        }
    }
}

// System Initialization
void initializeSystem() {
    M5.begin();
    Serial.begin(115200);

    if (!SD.begin()) {
        errorHandler("SD card initialization failed!");
    }

    esp_task_wdt_init(10, true);
    esp_task_wdt_add(NULL);

    memoryPoolInit();
}

// Firmware Execution with Escape Back to List
void executeFirmware(const String &firmwareName) {
    String firmwarePath = String(firmwareDir) + firmwareName + ".bin";
    File firmwareFile = SD.open(firmwarePath, FILE_READ);
    if (!firmwareFile) {
        errorHandler("Failed to open firmware file.");
        return;
    }

    size_t firmwareSize = firmwareFile.size();
    SmartPointer<uint8_t> firmwareMemory(static_cast<uint8_t*>(hybridMemoryAllocate(firmwareSize)));
    registerPointerReference(reinterpret_cast<void**>(&firmwareMemory));

    firmwareFile.read(firmwareMemory.get(), firmwareSize);
    firmwareFile.close();

    if (firmwareSize > M5.getFreeHeap()) {
        errorHandler("Not enough memory to run firmware.");
        return;
    }

    void (*firmwareEntryPoint)() = (void (*)())firmwareMemory.get();
    firmwareEntryPoint();

    listInstalledFirmware();
}

// Installed Firmware Menu
void displayInstalledFirmwareMenu() {
    int selectedIndex = 0;

    while (true) {
        M5.Lcd.clear();
        M5.Lcd.setTextSize(2);
        for (size_t i = 0; i < installedFirmware.size(); ++i) {
            if (i == selectedIndex) {
                M5.Lcd.setTextColor(themePrimaryColor, TFT_BLACK);
            } else {
                M5.Lcd.setTextColor(themeSecondaryColor, TFT_BLACK);
            }
            M5.Lcd.setCursor(10, 10 + i * 30);
            M5.Lcd.printf("Name: %s\n", installedFirmware[i].name.c_str());
        }

        debounceButtons();  // Debouncing Button Inputs
        if (M5.BtnA.wasPressed()) {
            selectedIndex = (selectedIndex > 0) ? selectedIndex - 1 : installedFirmware.size() - 1;
        } else if (M5.BtnC.wasPressed()) {
            selectedIndex = (selectedIndex + 1) % installedFirmware.size();
        } else if (M5.BtnB.wasPressed()) {
            executeFirmware(installedFirmware[selectedIndex].name);
            break;
        } else if (M5.BtnB.pressedFor(1000)) {
            break;
        }

        delay(100);
    }

    mainMenu();
}

// Main Menu
void mainMenu() {
    fadeIn();
    while (true) {
        M5.Lcd.clear();
        M5.Lcd.setTextSize(2);
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextColor(themePrimaryColor);
        M5.Lcd.println("M5 OS Main Menu");
        M5.Lcd.setCursor(10, 40);
        M5.Lcd.println("A: List Installed Firmware");
        M5.Lcd.setCursor(10, 70);
        M5.Lcd.println("B: Download New Firmware");
        M5.Lcd.setCursor(10, 100);
        M5.Lcd.println("C: Refresh Firmware List");
        M5.Lcd.setCursor(10, 130);
        M5.Lcd.println("D: File Explorer");
        M5.Lcd.setCursor(10, 160);
        M5.Lcd.println("E: Theme Switch");

        // Handle button presses for main menu options
        debounceButtons();  // Debouncing button inputs
        if (M5.BtnA.wasPressed()) {
            fadeOut();
            listInstalledFirmware();  // List and select installed firmware
        } else if (M5.BtnB.wasPressed()) {
            fadeOut();
            displayAvailableFirmware();  // Display and download new firmware
        } else if (M5.BtnC.wasPressed()) {
            fadeOut();
            downloadFirmwareList();  // Refresh firmware list from the server
            fadeIn();
            M5.Lcd.clear();
            M5.Lcd.setCursor(10, 10);
            M5.Lcd.setTextSize(2);
            M5.Lcd.setTextColor(themePrimaryColor);
            M5.Lcd.println("Firmware list refreshed.");
            delay(2000);
        } else if (M5.BtnD.wasPressed()) {
            fadeOut();
            displayFileExplorer("/");  // Launch the file explorer starting from the root directory
        } else if (M5.BtnE.wasPressed()) {
            fadeOut();
            themeSwitchMenu();  // Open the theme switch menu
        }

        delay(100);  // Small delay to debounce button presses
    }
}

// Function to debounce buttons
void debounceButtons() {
    static uint32_t lastDebounceTime = 0;
    static const uint32_t debounceDelay = 50;

    uint32_t currentTime = millis();
    if (currentTime - lastDebounceTime > debounceDelay) {
        lastDebounceTime = currentTime;
        M5.update();
    }
}

// Function to display available firmware for download
void displayAvailableFirmware() {
    int selectedIndex = 0;

    while (true) {
        M5.Lcd.clear();
        M5.Lcd.setTextSize(2);
        for (size_t i = 0; i < availableFirmware.size(); ++i) {
            if (i == selectedIndex) {
                M5.Lcd.setTextColor(themePrimaryColor, TFT_BLACK);  // Highlight selected item
            } else {
                M5.Lcd.setTextColor(themeSecondaryColor, TFT_BLACK);
            }
            M5.Lcd.setCursor(10, 10 + i * 40);
            M5.Lcd.printf("Name: %s", availableFirmware[i].name.c_str());
            M5.Lcd.setCursor(10, 40 + i * 40);
            M5.Lcd.setTextColor(themePrimaryColor);
            M5.Lcd.printf("Version: %s", availableFirmware[i].version.c_str());
            M5.Lcd.setCursor(200, 40 + i * 40);
            M5.Lcd.setTextColor(themeSecondaryColor);
            M5.Lcd.printf("Size: %d bytes", availableFirmware[i].size);
        }

        // Handle button presses for navigation (A = up, C = down, B = select/download)
        debounceButtons();
        if (M5.BtnA.wasPressed()) {
            selectedIndex = (selectedIndex > 0) ? selectedIndex - 1 : availableFirmware.size() - 1;
        } else if (M5.BtnC.wasPressed()) {
            selectedIndex = (selectedIndex + 1) % availableFirmware.size();
        } else if (M5.BtnB.wasPressed()) {
            // Download and install the selected firmware
            fadeOut();
            bool success = downloadAndInstallFirmware(availableFirmware[selectedIndex]);
            fadeIn();
            if (success) {
                M5.Lcd.clear();
                M5.Lcd.setCursor(10, 10);
                M5.Lcd.setTextSize(2);
                M5.Lcd.setTextColor(themePrimaryColor);
                M5.Lcd.println("Firmware installed successfully.");
            } else {
                M5.Lcd.clear();
                M5.Lcd.setCursor(10, 10);
                M5.Lcd.setTextSize(2);
                M5.Lcd.setTextColor(themeSecondaryColor);
                M5.Lcd.println("Failed to install firmware.");
            }
            delay(2000);
            break;  // After installation, break to return to main menu
        }

        delay(100);  // Small delay to debounce button presses
    }
}

// Function to download and install firmware
bool downloadAndInstallFirmware(const FirmwareInfo &info) {
    HTTPClient http;
    http.begin(info.url);
    int httpCode = http.GET();

    if (httpCode == HTTP_CODE_OK) {
        int len = http.getSize();
        SmartPointer<uint8_t> firmwareData(static_cast<uint8_t*>(hybridMemoryAllocate(len)));
        registerPointerReference(reinterpret_cast<void**>(&firmwareData));

        WiFiClient *stream = http.getStreamPtr();
        int totalRead = 0;
        while (http.connected() && (len > 0 || len == -1)) {
            size_t size = stream->available();
            if (size) {
                int c = stream->readBytes(&firmwareData[totalRead], size);
                totalRead += c;
                len -= c;
            }
            delay(1);
        }
        http.end();

        if (totalRead > 0) {
            File firmwareFile = SD.open(firmwareDir + info.name + ".bin", FILE_WRITE);
            if (firmwareFile) {
                firmwareFile.write(firmwareData.get(), totalRead);
                firmwareFile.close();
                return true;
            }
        }
    }
    return false;
}

// Function to list installed firmware on the SD card
void listInstalledFirmware() {
    File dir = SD.open(firmwareDir);

    if (!dir) {
        return;
    }

    installedFirmware.clear();

    while (true) {
        File entry = dir.openNextFile();
        if (!entry) {
            break;  // No more files
        }

        if (!entry.isDirectory()) {
            String fileName = entry.name();
            if (fileName.endsWith(".bin")) {
                String firmwareName = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.'));
                FirmwareInfo info;
                info.name = firmwareName;
                installedFirmware.push_back(info);
            }
        }
        entry.close();
    }

    if (installedFirmware.empty()) {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(themeSecondaryColor);
        M5.Lcd.println("No firmware found.");
        delay(2000);
        return;
    }

    displayInstalledFirmwareMenu();
}

// WiFi password input using M5Stack buttons
void inputPassword() {
    char passwordBuffer[32] = "";
    int length = 0;

    const char* charMap = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
    int mapSize = strlen(charMap);
    int charIndex = 0;

    while (true) {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(themePrimaryColor);
        M5.Lcd.println("Enter WiFi Password:");
        M5.Lcd.setCursor(10, 40);
        M5.Lcd.setTextColor(themeSecondaryColor);
        M5.Lcd.println(passwordBuffer);

        M5.Lcd.setCursor(10, 70);
        M5.Lcd.setTextColor(themePrimaryColor);
        M5.Lcd.printf("Char: %c", charMap[charIndex]);

        debounceButtons();
        if (M5.BtnA.wasPressed()) {
            charIndex = (charIndex > 0) ? charIndex - 1 : mapSize - 1;
        } else if (M5.BtnC.wasPressed()) {
            charIndex = (charIndex + 1) % mapSize;
        } else if (M5.BtnB.wasPressed()) {
            if (length < sizeof(passwordBuffer) - 1) {
                passwordBuffer[length] = charMap[charIndex];
                length++;
                passwordBuffer[length] = '\0';
            }
        } else if (M5.BtnB.pressedFor(1000)) {
            // Long press confirms the password
            strcpy(wifiPassword, passwordBuffer);
            M5.Lcd.clear();
            M5.Lcd.setCursor(10, 10);
            M5.Lcd.setTextSize(2);
            M5.Lcd.setTextColor(themePrimaryColor);
            M5.Lcd.println("Password Set");
            delay(2000);
            break;
        }

        delay(100);  // Small delay to debounce button presses
    }
}

// WiFi selection and connection with password input
void selectWiFiNetwork() {
    M5.Lcd.clear();
    M5.Lcd.setTextSize(2);
    M5.Lcd.setTextColor(themePrimaryColor);
    M5.Lcd.println("Scanning for WiFi networks...");
    int numNetworks = WiFi.scanNetworks();
    if (numNetworks == 0) {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(themeSecondaryColor);
        M5.Lcd.println("No WiFi networks found.");
        delay(2000);
        return;
    }

    int selectedIndex = 0;
    while (true) {
        M5.Lcd.clear();
        for (int i = 0; i < numNetworks; ++i) {
            if (i == selectedIndex) {
                M5.Lcd.setTextColor(themeSecondaryColor, TFT_BLACK);  // Highlight selected item
            } else {
                M5.Lcd.setTextColor(themePrimaryColor, TFT_BLACK);
            }
            M5.Lcd.setCursor(10, 10 + i * 20);
            M5.Lcd.printf("%s (%d)", WiFi.SSID(i).c_str(), WiFi.RSSI(i));
        }

        debounceButtons();
        if (M5.BtnA.wasPressed()) {
            selectedIndex = (selectedIndex > 0) ? selectedIndex - 1 : numNetworks - 1;
        } else if (M5.BtnC.wasPressed()) {
            selectedIndex = (selectedIndex + 1) % numNetworks;
        } else if (M5.BtnB.wasPressed()) {
            strcpy(wifiSSID, WiFi.SSID(selectedIndex).c_str());  // Store the selected SSID
            inputPassword();  // Prompt the user to enter the WiFi password
            connectWiFi();  // Attempt to connect using the selected SSID and password
            break;
        }

        delay(100);  // Small delay to debounce button presses
    }
}

// WiFi connection function
void connectWiFi() {
    WiFi.begin(wifiSSID, wifiPassword);

    int retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < 10) {
        delay(1000);
        M5.Lcd.print(".");
        retries++;
    }

    if (WiFi.status() != WL_CONNECTED) {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(themeSecondaryColor);
        M5.Lcd.println("Failed to connect to WiFi.");
        delay(2000);
    } else {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(themePrimaryColor);
        M5.Lcd.println("WiFi Connected!");
        delay(2000);
    }
}

// Display the startup intro
void displayStartupIntro() {
    fadeIn();
    M5.Lcd.clear();
    M5.Lcd.setCursor(10, 10);
    M5.Lcd.setTextSize(5);
    M5.Lcd.setTextColor(TFT_WHITE);
    M5.Lcd.println("M5 OS");
    displayCustomMessage();
    fadeOut();
}

// Display a custom message after the startup animation
void displayCustomMessage() {
    M5.Lcd.clear();
    M5.Lcd.setCursor(10, 10);
    M5.Lcd.setTextSize(3);
    M5.Lcd.setTextColor(TFT_WHITE);
    M5.Lcd.println("Welcome to M5 OS");
    M5.Lcd.setCursor(10, 50);
    M5.Lcd.setTextSize(2);
    M5.Lcd.println("System by Salavadordata");

    delay(2300);  // Display the message for 2.3 seconds
}

// Fade-in effect for smoother UI transitions
void fadeIn() {
    for (int brightness = 0; brightness < 255; brightness += 5) {
        M5.Lcd.setBrightness(brightness);
        delay(10);
    }
}

// Fade-out effect for smoother UI transitions
void fadeOut() {
    for (int brightness = 255; brightness > 0; brightness -= 5) {
        M5.Lcd.setBrightness(brightness);
        delay(10);
    }
}

// Monitor system health and trigger low power mode when idle
void monitorIdleState() {
    static unsigned long lastActiveTime = 0;
    unsigned long currentTime = millis();

    if (M5.BtnA.isPressed() || M5.BtnB.isPressed() || M5.BtnC.isPressed()) {
        lastActiveTime = currentTime;  // Reset timer on any button press
    }

    if (currentTime - lastActiveTime > 10000) {
        enterLowPowerMode();
    }
}

// Enter low power mode to save battery
void enterLowPowerMode() {
    M5.Power.deepSleep(0);  // Enter deep sleep mode
}

// System health check to manage system resources
void checkSystemHealth() {
    static unsigned long lastHealthCheck = 0;
    unsigned long currentTime = millis();

    if (currentTime - lastHealthCheck > 1000) {
        lastHealthCheck = currentTime;

        if (M5.getFreeHeap() < 5000) {  // Example threshold for low memory
            errorHandler("Low memory detected", 3);
        }
    }
}

// Heartbeat to reset the watchdog timer periodically
void heartbeatCheck() {
    static Ticker heartbeat;
    heartbeat.attach(1, []() {
        esp_task_wdt_reset();  // Reset watchdog timer to prevent timeout
    });
}

// Error handler function
void errorHandler(const String &errorMsg, int retries) {
    if (retries > 0) {
        delay(500);
        errorHandler(errorMsg, retries - 1);
    } else {
        M5.Lcd.clear();
        M5.Lcd.setCursor(10, 10);
        M5.Lcd.setTextSize(2);
        M5.Lcd.setTextColor(TFT_RED);
        M5.Lcd.println("Critical error!");
        delay(1000);  // Short delay before resetting
        M5.reset();
    }
}

// Initialize the system
void setup() {
    initializeSystem();

    // Display the startup intro with the custom message
    displayStartupIntro();

    // Connect to WiFi
    connectWiFi();

    // Download the initial firmware list from the server
    downloadFirmwareList();

    // Enter the main menu
    mainMenu();
}

// Main loop to monitor system health and idle state
void loop() {
    taskScheduler.execute();  // Run scheduled tasks like health checks, idle monitoring, etc.
    monitorIdleState();  // Check for idle state and enter low power mode if necessary
    checkSystemHealth();  // Continuously monitor system health
    heartbeatCheck();     // Reset the watchdog to prevent system reset
}
